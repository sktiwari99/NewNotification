public class MyMediaUploadWebRequestTask extends
			AsyncTask<Void, Integer, Void> {
		private ProgressDialog dialog;
		private Context context;
		private Handler handler;
		private List<NameValuePair> nameValuePairs;
		private String link;
		int loadcount = 0;

		public MyMediaUploadWebRequestTask(Context context) {
			this.context = context;
		}

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			try {
				dialog = new ProgressDialog(context);
				dialog.setCancelable(false);
				dialog.setMessage("Please wait...");
				dialog.show();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}

		@Override
		protected void onPostExecute(Void result) {
			try {
				dialog.dismiss();
			
				Intent intent = new Intent(mContext, MyOpenDrawerActivity.class);
				startActivity(intent);
				finish();
				super.onPostExecute(result);
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}

		@SuppressWarnings("deprecation")
		@Override
		protected Void doInBackground(Void... params) {
			HttpParams httpParams = new BasicHttpParams();
			HttpConnectionParams
					.setConnectionTimeout(httpParams, 1000 * 60 * 5);
			int timeoutSocket = 1 * 60 * 1000;
			HttpConnectionParams.setSoTimeout(httpParams, timeoutSocket);
			try {

				@SuppressWarnings("deprecation")
				MultipartEntity entity = new MultipartEntity();
				entity.addPart("value",
						new StringBody("httpupload", Charset.forName("UTF-8")));
				File myFile = null;
				// Get the Image Count from List
				for (int i = 0; i < arrayList_img_count.size(); i++) {
					file_path_one = arrayList_img_count.get(i);
					myFile = new File(file_path_one);
					loadcount = i + 1;
					runOnUiThread(new Runnable() {
						@Override
						public void run() {
							dialog.setMessage(" Uploading file " + loadcount
									+ "/" + arrayList_img_count.size());
						}
					});

					FileBody fileBody = new FileBody(myFile);
					entity.addPart("auth_api_key", new StringBody(""
							+ Constant.AUTH_API_KEY));
					entity.addPart("auth_code", new StringBody(""
							+ strLoginAuthCode));
					entity.addPart("auth_user_key", new StringBody(""
							+ strLoginAuthKey, Charset.forName("UTF-8")));
					entity.addPart("event_number_of_media_records",
							new StringBody("1", Charset.forName("UTF-8")));

					entity.addPart("media_account_key", new StringBody(""
							+ strUserAccountKey, Charset.forName("UTF-8")));
					entity.addPart("media_counter",
							new StringBody("1", Charset.forName("UTF-8")));
					if (CopyTimeLineListAdapter.track_time_tag == true) {
						entity.addPart("media_event_key",
								new StringBody(""
										+ str_expense_distance_event_key,
										Charset.forName("UTF-8")));
					} else {
						entity.addPart("media_event_key", new StringBody(""
								+ str_event_key, Charset.forName("UTF-8")));
					}
					entity.addPart("event_user_key", new StringBody(""
							+ strUserAccountKey, Charset.forName("UTF-8")));
					entity.addPart("userfile", fileBody);

					HttpPost httppost = new HttpPost(
							Constant.UPLOAD_MEDIA_OBJECT_URL);
					httppost.setHeader("X-File-Name", "image.jpg");
					httppost.setHeader("X-File-Size", "" + fileSizeInKB);
					httppost.setEntity(entity);
					HttpClient httpClient = new DefaultHttpClient(httpParams);
					HttpResponse response;

					response = httpClient.execute(httppost);
					responseUploadString = EntityUtils.toString(response
							.getEntity());
					try {
						JSONObject jsonObject = new JSONObject(
								responseUploadString);
						String str_result = jsonObject.getString("result");
						if (str_result.equalsIgnoreCase("ok")) {
							continue;
						} else {
							runOnUiThread(new Runnable() {

								@Override
								public void run() {
									Toast.makeText(mContext,
											"File uploaded failed!",
											Toast.LENGTH_SHORT).show();
								}
							});
							break;
						}
					} catch (Exception ex) {
						ex.printStackTrace();
					}
				}
				Log.v("", "responseUploadString  : " + responseUploadString);
			} catch (Exception ex) {
				ex.printStackTrace();
			}
			return null;
		}
	}
	
	_______________________________________________________*******************________________
	public void cameraButoonOnClick(View view) {
		try {
			myDialog = new Dialog(mContext);
			myDialog.setTitle("Select");
			myDialog.setContentView(R.layout.choosemedia_popup);
			myDialog.setCanceledOnTouchOutside(true);
			TextView take_picture = (TextView) myDialog
					.findViewById(R.id.take_picture_txtview);
			TextView choose_picture = (TextView) myDialog
					.findViewById(R.id.choose_picture_txtview);
			TextView cancel_media_popup = (TextView) myDialog
					.findViewById(R.id.cancel_media_popup_txtview);

			take_picture.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					Intent cameraIntent = new Intent(
							"android.media.action.IMAGE_CAPTURE");
					File file = new File(Environment
							.getExternalStorageDirectory()
							+ File.separator
							+ "img.jpg");
					cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT,
							Uri.fromFile(file));
					startActivityForResult(cameraIntent, 111);
					myDialog.dismiss();
				}
			});
			choose_picture.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					Intent intent = new Intent(
							Intent.ACTION_PICK,
							android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
					intent.setType("image/*");
					intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);
					startActivityForResult(
							Intent.createChooser(intent, "Select Picture"),
							imagerequestcode);
					myDialog.dismiss();
				}
			});
			cancel_media_popup.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					myDialog.dismiss();
				}
			});
			try {
				myDialog.show();
			} catch (Exception ex) {
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
	***********
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		try {
			if (requestCode == imagerequestcode && resultCode == RESULT_OK) {
				Uri selectedImage = data.getData();
				String[] filePathColumn = { MediaStore.Images.Media.DATA };
				Cursor cursor = getContentResolver().query(selectedImage,
						filePathColumn, null, null, null);
				cursor.moveToFirst();

				int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
				filePath = cursor.getString(columnIndex);
				arrayList_img_count.add(filePath.toString());
				SharedPreferencesUtility.putStringPreferences(
						ExpenseDistanceActivity.this,
						SharedPreferencesUtility.COUNT_IMAGE_UPLOAD,
						String.valueOf(arrayList_img_count.size()));
				long fileSizeInBytes = filePath.length();
				fileSizeInKB = fileSizeInBytes / 1024;
				cursor.close();
				Bitmap yourSelectedImage = BitmapFactory.decodeFile(filePath);
				// cameraImageView.setImageBitmap(yourSelectedImage);
				image_count = SharedPreferencesUtility.getStringPreferences(
						getApplicationContext(),
						SharedPreferencesUtility.COUNT_IMAGE_UPLOAD);
				image_count_txtView.setVisibility(View.VISIBLE);
				image_count_txtView.setText(image_count);
			}
			if (requestCode == 111 && resultCode == RESULT_OK) {
				File file = new File(Environment.getExternalStorageDirectory()
						+ File.separator + "img.jpg");
				filePath = file.getAbsolutePath();
				arrayList_img_count.add(file.getAbsolutePath());
				SharedPreferencesUtility.putStringPreferences(
						ExpenseDistanceActivity.this,
						SharedPreferencesUtility.COUNT_IMAGE_UPLOAD,
						String.valueOf(arrayList_img_count.size()));
				long fileSizeInBytes = file.getAbsoluteFile().length();
				fileSizeInKB = fileSizeInBytes / 1024;
				// get bitmap from path with size of
				// cameraImageView.setImageBitmap(Util
				// .decodeSampledBitmapFromFile(file.getAbsolutePath(),
				// 600, 450));
				image_count = SharedPreferencesUtility.getStringPreferences(
						getApplicationContext(),
						SharedPreferencesUtility.COUNT_IMAGE_UPLOAD);
				image_count_txtView.setVisibility(View.VISIBLE);
				image_count_txtView.setText(image_count);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
